{
  "name": "tbd",
  "description": "tbd is a test data building library, allowing you to quickly spin up large amounts of fake data to be pumped into tests",
  "keywords": [
    "testing",
    "unit-testing",
    "data",
    "generator"
  ],
  "version": "0.6.4",
  "maintainers": [
    {
      "name": "Aaron Powell",
      "email": "me@aaron-powell.com",
      "url": "http://www.aaron-powell.com"
    }
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/aaronpowell/tbd/blob/master/License.txt"
    }
  ],
  "dependencies": {
    "jasmine-node": ">=1.0.0",
    "express": ">=2.5.0",
    "jade": ">=0.18.0"
  },
  "repositories": [
    {
      "type": "git",
      "url": "https://github.com/aaronpowell/tbd"
    }
  ],
  "scripts": {
    "test": "node tests.js"
  },
  "readme": "# tbd - Test Data Builder\r\n\r\n[![Build Status](https://secure.travis-ci.org/aaronpowell/tbd.png)](https://secure.travis-ci.org/aaronpowell/tbd.png)\r\n\r\nHave you ever needed to push out a bunch of data for testing your app? Maybe your backend services aren't ready but you want to build the UI for the expected data?\r\n\r\nWell tbd to the rescue, tbd will allow you to quickly build up some data quickly and painlessly.\r\n\r\ntbd is designed to work in both Node.js and in the browser so you can use it for any application you want.\r\n\r\n# Getting tbd\r\n\r\nFor *Node.js*:\r\n\r\n    npm install tbd\r\n    \r\nFor the browser - grab the latest version from [git](https://github.com/aaronpowell/tbd/blob/master/lib/tbd.js).\r\n\r\n# Using tbd\r\n\r\n## Node.js\r\n\r\n### Basic usage\r\n\r\n    var tbd = require('tbd');\r\n    \r\n    var data = tbd.from({ hello: 'world' }).make(10);\r\n    \r\n    console.log(data.length); //10\r\n    \r\n### Tweaking properties\r\n\r\n    var tbd = require('tbd');\r\n    \r\n    var data = tbd.from({ hello: 'world' })\r\n                .prop('hello').use(function() { return 'my value; }).done()\r\n                .make(10);\r\n                \r\n    console.log(data.length); //10\r\n    \r\n### Using classes\r\n\r\ntbd allows you to create objects from classes the same way that you can create data from objects. The difference is that for classes you just pass in the class reference.\r\n\r\nYou can also provide constructor parameters using the `constructWith` and passing in the arguments as you would pass them for the constructor. If you don't want to pass anything to your constructor you don't need to use that method.\r\n\r\n    var Person = function(firstName. lastName) {\r\n        this.firstName = firstName;\r\n        this.lastName = lastName;\r\n    };\r\n    \r\n    var data = tbd.from(Person)\r\n                .constructWith('Aaron', 'Powell')\r\n                .make(10);\r\n                \r\n### Utilities\r\n\r\nThere are a few utility methods provided by tbd to make generating more random data. These hang off the `tbd.utils` namespace.\r\n\r\n**tbd.utils.random**\r\n\r\nThis is used for selecting a random value from an array:\r\n\r\n    tbd.from({ foo: 1 })\r\n        .prop('foo').use(tbd.utils.random(1,2,3,4,5,6,7,8,9))\r\n        .make(10);\r\n    //foo's value will be randomly selected from the array for each object created\r\n    \r\n**tbd.utils.range**\r\n\r\nThis is used for randomly choosing a value from a range, similar to the `random` method but simpler as you specify an upper and lower bounds:\r\n\r\n    tbd.from({ foo: 1 })\r\n        .prop('foo').use(tbd.utils.range(1, 1000))\r\n        .make(10);\r\n    //foo's value will be randomly chosen from a number between 1 and 1000 (inclusive)\r\n    \r\nRanges don't have to be just numbers, they can also be dates:\r\n\r\n    tbd.from({ date: new Date })\r\n        .prop('date').use(tbd.utils.range(new Date(2010, 1, 1), new Date()))\r\n        .make(10);\r\n    //the date propery will be a randomly chosing date between the min and max\r\n    \r\n**tbd.utils.sequence**\r\n\r\nThis is used for creating a sequential set of data from a starting value:\r\n\r\n    tbd.from({ foo: 1 })\r\n        .prop('foo').use(tbd.utils.sequential(1))\r\n        .make(10);\r\n    //[0].foo === 1, [9].foo === 10\r\n\r\nSequentials support numbers, letters (and words, where the next letter in the alphabet is appended) and dates:\r\n\r\n    tbd.from({ date: new Date })\r\n        .prop('foo').use(tbd.utils.sequential(new Date() /* optional parameter for date property the increment, default is 'd' */)\r\n        .make(10);\r\n    //the 'day' property will be incremented by 1 from the starting value\r\n    \r\nDates allow you to increment any part of the date object (except milliseconds), to do so pass in a 2nd argument:\r\n\r\n* y -> Year\r\n* M -> Month\r\n* d -> Day (default)\r\n* h -> Hour\r\n* m -> Minutes\r\n* s -> Seconds\r\n    \r\n## Browser\r\n\r\nWhen using tbd in the browser it works exactly the same way, only you don't need the `require` statement (unless you want to use RequireJS).\r\n\r\n# Running the tests\r\n\r\nThere's a bunch of tests shipped which uses [Jasmine](http://pivotal.github.com/jasmine/) so you can run them from node.js if you want:\r\n\r\n    node tests.js\r\n\r\n# License\r\n\r\n[MIT](https://github.com/aaronpowell/tbd/blob/master/License.txt)",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/aaronpowell/tbd"
  },
  "bugs": {
    "url": "https://github.com/aaronpowell/tbd/issues"
  },
  "_id": "tbd@0.6.4",
  "dist": {
    "shasum": "3a1bb1a7bbe3e23d645623de70a26c10e8bc21f7"
  },
  "_from": "tbd@0.6.4",
  "_resolved": "https://registry.npmjs.org/tbd/-/tbd-0.6.4.tgz"
}
